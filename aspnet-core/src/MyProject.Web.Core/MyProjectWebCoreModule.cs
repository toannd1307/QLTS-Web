// This file is not generated, but this comment is necessary to exclude it from StyleCop analysis 
// <auto-generated/> 
using System;
using System.Text;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Abp.AspNetCore;
using Abp.AspNetCore.Configuration;
using Abp.AspNetCore.SignalR;
using Abp.Modules;
using Abp.Reflection.Extensions;
using Abp.Zero.Configuration;
using MyProject.Authentication.JwtBearer;
using MyProject.Configuration;
using MyProject.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc.ApplicationParts;
using System.IO;
using Abp.IO;

namespace MyProject
{
    [DependsOn(
         typeof(MyProjectApplicationModule),
         typeof(MyProjectEntityFrameworkModule),
         typeof(AbpAspNetCoreModule)
        , typeof(AbpAspNetCoreSignalRModule)
     )]
    public class MyProjectWebCoreModule : AbpModule
    {
        private readonly IWebHostEnvironment _env;
        private readonly IConfigurationRoot _appConfiguration;

        public MyProjectWebCoreModule(IWebHostEnvironment env)
        {
            _env = env;
            _appConfiguration = env.GetAppConfiguration();
        }

        public override void PreInitialize()
        {
            Configuration.DefaultNameOrConnectionString = _appConfiguration.GetConnectionString(
                MyProjectConsts.ConnectionStringName
            );

            // Use database for language management
            Configuration.Modules.Zero().LanguageManagement.EnableDbLocalization();

            Configuration.Modules.AbpAspNetCore()
                 .CreateControllersForAppServices(
                     typeof(MyProjectApplicationModule).GetAssembly()
                 );

            ConfigureTokenAuth();
        }

        private void ConfigureTokenAuth()
        {
            IocManager.Register<TokenAuthConfiguration>();
            var tokenAuthConfig = IocManager.Resolve<TokenAuthConfiguration>();

            tokenAuthConfig.SecurityKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_appConfiguration["Authentication:JwtBearer:SecurityKey"]));
            tokenAuthConfig.Issuer = _appConfiguration["Authentication:JwtBearer:Issuer"];
            tokenAuthConfig.Audience = _appConfiguration["Authentication:JwtBearer:Audience"];
            tokenAuthConfig.SigningCredentials = new SigningCredentials(tokenAuthConfig.SecurityKey, SecurityAlgorithms.HmacSha256);
            tokenAuthConfig.Expiration = TimeSpan.FromDays(1);
        }

        public override void Initialize()
        {
            IocManager.RegisterAssemblyByConvention(typeof(MyProjectWebCoreModule).GetAssembly());
        }

        public override void PostInitialize()
        {
            IocManager.Resolve<ApplicationPartManager>()
                .AddApplicationPartsIfNotAddedBefore(typeof(MyProjectWebCoreModule).Assembly);
            SetAppFolders();
        }

        private void SetAppFolders()
        {
            var appFolders = IocManager.Resolve<AppFolders>();
            // file export
            appFolders.TempFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads");
            // Chứa file upload phần Demo
            appFolders.DemoUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}Demo");

            // Folder chứ file mẫu cho phần import Demo
            appFolders.DemoFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}Demo");

            // Nhà cung cấp
            appFolders.NhaCungCapFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}NhaCungCap");
            appFolders.NhaCungCapUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}NhaCungCap");

            // Dự trù mua sắm
            appFolders.DuTruMuaSamFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}DuTruMuaSam");
            appFolders.DuTruMuaSamUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}DuTruMuaSam");

            // Toàn bộ TS
            appFolders.ToanBoTSFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}ToanBoTS");
            appFolders.ToanBoTSUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}ToanBoTS");

            // Đầu đọc
            appFolders.DauLocFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}DauLoc");
            appFolders.DauLocFileUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}DauLocUpload");


            // Loại tài sản
            appFolders.LoaiTaiSanFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}LoaiTaiSan");
            appFolders.LoaiTaiSanUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}LoaiTaiSan");

            // Tổ chức
            appFolders.ToChucFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}ToChuc");
            appFolders.ToChucUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}ToChuc");

            // Vị trí địa lý
            appFolders.ViTriDiaLyFileDownloadFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}Downloads{Path.DirectorySeparatorChar}Imports{Path.DirectorySeparatorChar}ViTriDiaLy");
            appFolders.ViTriDiaLyUploadFolder = Path.Combine(_env.WebRootPath, $"Upload{Path.DirectorySeparatorChar}ViTriDiaLy");

            // Temp mail
            appFolders.TempMailFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}MailTemplate");

            // App
            appFolders.AndroidAppFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}MobileApp{Path.DirectorySeparatorChar}/Android");
            appFolders.IphoneAppFolder = Path.Combine(_env.WebRootPath, $"Temp{Path.DirectorySeparatorChar}MobileApp{Path.DirectorySeparatorChar}/Iphone");

            try
            {
                DirectoryHelper.CreateIfNotExists(appFolders.TempFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DemoUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DemoFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.NhaCungCapFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.NhaCungCapUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DuTruMuaSamUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DuTruMuaSamFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ToanBoTSFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ToanBoTSUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DauLocFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.DauLocFileUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.LoaiTaiSanFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.LoaiTaiSanUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ToChucFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ToChucUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ViTriDiaLyFileDownloadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.ViTriDiaLyUploadFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.TempMailFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.AndroidAppFolder);
                DirectoryHelper.CreateIfNotExists(appFolders.IphoneAppFolder);
            }
            catch { }
        }
    }
}
