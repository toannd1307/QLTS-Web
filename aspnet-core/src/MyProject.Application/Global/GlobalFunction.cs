// This file is not generated, but this comment is necessary to exclude it from StyleCop analysis 
// <auto-generated/> 
using Abp;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.IO;
using Abp.IO.Extensions;
using Abp.UI;
using DbEntities;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using MyProject.Authorization;
using MyProject.Authorization.Users;
using MyProject.Data;
using MyProject.Global.Dtos;
using MyProject.Net.MimeTypes;
using MyProject.QuanLyLoaiTaiSan.Dtos;
using MyProject.Shared;
using Newtonsoft.Json;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MyProject.Global
{
    public class GlobalFunction
    {
        public static IAppFolders AppFolders { get; set; }

        public static DateTime? GetDateTime(DateTime? dateTime)
        {
            return dateTime != null ? dateTime.Value.ToLocalTime() : dateTime;
        }

        public static string RegexFormat(string input)
        {
            if (input != null)
            {
                return Regex.Replace(input, @"\s+", " ").Trim();
            }
            else
                return input;
        }

        /// <summary>
        /// Hàm lưu file
        /// </summary>
        /// <param name="FolderPath">Đường dẫn lưu file trên server</param>
        /// <param name="ImportFile">File</param>
        /// <returns>Đường dẫn trỏ tới file trên server</returns>
        public static string SaveFile(string FolderPath, IFormFile ImportFile)
        {
            byte[] fileBytes;
            using (var stream = ImportFile.OpenReadStream())
            {
                fileBytes = stream.GetAllBytes();
            }

            string uploadFileName = string.Format("{0:yyyyMMdd_hhmmss}_", DateTime.Now) + ImportFile.FileName;

            // Set full path to upload file
            DirectoryHelper.CreateIfNotExists(FolderPath);
            string uploadFilePath = Path.Combine(FolderPath, uploadFileName);
            if (!Directory.Exists(FolderPath))
            {
                Directory.CreateDirectory(FolderPath);
            }
            // Save new file
            File.WriteAllBytes(uploadFilePath, fileBytes);

            return uploadFilePath;
        }

        /// <summary>
        /// Đọc file excel
        /// </summary>
        /// <param name="FilePath">Đường dẫn file excel cần đọc trên server</param>
        /// <param name="startRowIndex">Đọc từ dòng nào</param>
        /// <returns>Dữ liệu đọc được từ file excel</returns>
        public static async Task<List<List<string>>> ReadFromExcel(string FilePath, int startRowIndex = 2, int sheetIndex = 1)
        {
            List<List<string>> Result = new List<List<string>>();
            FileInfo fileInfo = new FileInfo(FilePath);
            try
            {
                using (var excelPackage = new ExcelPackage(fileInfo))
                {
                    var sheet = excelPackage.Workbook.Worksheets[sheetIndex];

                    if (sheet != null)
                    {
                        for (var rowIndex = 0; rowIndex < sheet.Dimension.End.Row - 1; rowIndex++)
                        {
                            List<string> Line = new List<string>();

                            for (var colIndex = 0; colIndex < sheet.Dimension.Columns; colIndex++)
                            {
                                var Value = sheet.Cells[rowIndex + startRowIndex, colIndex + 1].Value;
                                Line.Add(Value != null ? Value.ToString() : "");
                            }
                            Result.Add(Line);
                        }
                    }
                }
            }
            catch (Exception)
            {

                throw new UserFriendlyException(StringResources.FileSaiDinhDang);
            }
            return await Task.FromResult(Result);
        }
        /// <summary>
        /// Tải file mẫu
        /// </summary>
        /// <param name="FileName">Tên file cần tải</param>
        /// <param name="pathFileDownload">Thư mục chứa file cần tải</param>
        /// <param name="pathFileToken">Thư mục chứa token down ( Không được sửa )</param>
        /// <returns></returns>
        public static Task<FileDto> DownloadFileMau(string FileName, string pathFileDownload, string pathFileToken)
        {
            var result = new FileDto(FileName, MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet);
            string SourceFile = Path.Combine(pathFileDownload, FileName);
            string DestinationFile = Path.Combine(pathFileToken, result.FileToken);
            File.Copy(SourceFile, DestinationFile, true);
            return Task.FromResult(result);
        }

        public static async Task<List<List<string>>> ReadFromExcelMaTranVung(string FilePath, int startRowIndex, int sheetIndex = 1)
        {
            List<List<string>> Result = new List<List<string>>();
            FileInfo fileInfo = new FileInfo(FilePath);
            try
            {
                using (var excelPackage = new ExcelPackage(fileInfo))
                {
                    var sheet = excelPackage.Workbook.Worksheets[sheetIndex];

                    if (sheet != null)
                    {
                        for (var rowIndex = 0; rowIndex < sheet.Dimension.End.Row; rowIndex++)
                        {
                            List<string> Line = new List<string>();

                            for (var colIndex = 0; colIndex < sheet.Dimension.Columns; colIndex++)
                            {
                                var Value = sheet.Cells[rowIndex + startRowIndex, colIndex + 1].Value;
                                Line.Add(Value != null ? Value.ToString() : "");
                            }
                            Result.Add(Line);
                        }
                    }
                }
            }
            catch (Exception gggg)
            {

                throw gggg;
            }
            return await Task.FromResult(Result);
        }
        public static double TinhSoPhut(DateTime dateTime1, DateTime dateTime2, MidpointRounding midpointRounding = MidpointRounding.AwayFromZero)
        {
            return Math.Round((double)(GetDateTime(dateTime1) - GetDateTime(dateTime2)).Value.TotalMinutes, midpointRounding);
        }

        public static string GetDataApi(string url)
        {
            try
            {
                string token = GetTokenSmartA();
                WebRequest httpWebRequest = HttpWebRequest.Create(url);
                httpWebRequest.Headers.Add("Content-type", "text/json");
                httpWebRequest.Headers.Add("Authorization", token);
                WebResponse response = httpWebRequest.GetResponse();

                StreamReader streamReader = new StreamReader(response.GetResponseStream());
                StreamReader reader = streamReader;

                string responseText = reader.ReadToEnd();
                return responseText;
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }

        public static string PostDataApi(string url, string json)
        {
            try
            {
                string token = GetTokenSmartA();
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Headers.Add("Authorization", token);
                httpWebRequest.Method = "POST";

                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {


                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                    return result;
                }
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }

        public static string GetTokenSmartA()
        {
            string hostNoc = ConfigurationManager.AppSettings["hostNoc"].ToString();
            if (hostNoc != "")
            {
                string url = hostNoc + "/api/TokenAuth/Authenticate";
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";

                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = "{\"userNameOrEmailAddress\":\"adminpkth@mobifone.vn\"," +
                                  "\"password\":\"123456\"}";

                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var json = streamReader.ReadToEnd();
                    dynamic stuff = JsonConvert.DeserializeObject(json);
                    string token = stuff.result.accessToken;
                    return "Bearer " + token;
                }
            }
            return null;
        }

        /// <summary>
        /// Hàm tính công thức đã được setup.
        /// </summary>
        /// <param name="expression">Công thức cần tình</param>
        /// <returns>Trả về kiểu int.</returns>

        public static double Evaluate(string expression)
        {
            string xxxx = expression;

            if (!string.IsNullOrEmpty(expression))
            {
                expression = expression.Replace(",", ".");
                var listGiaTri = expression.Split(new char[] { '+', '-', '*', '/', '(', ')', '[', ']' }).Where(e => !string.IsNullOrEmpty(e)).Distinct().ToList();
                string pattern = string.Empty;
                string replace = ".0";

                foreach (var item in listGiaTri)
                {
                    if (!item.Contains(".") && item != "0")
                    {
                        pattern = String.Format(@"\b{0}\b", item);
                        expression = Regex.Replace(expression, pattern, item + replace);
                    }
                }

                using (DataTable table = new DataTable())
                {
                    table.Columns.Add("myExpression", typeof(double), expression);
                    DataRow row = table.NewRow();
                    table.Rows.Add(row);
                    string myExpression = row["myExpression"].ToString() ?? "0";
                    return Math.Round(double.Parse(myExpression) > 0 ? double.Parse(myExpression) : 0);
                }
            }
            else
            {
                return 0;
            }
        }

        public static async Task XoaTaiSan(IRepository<TaiSan> taiSanRepository,
                                           IRepository<PhieuTaiSan, long> phieuTaiSanRepository,
                                           IRepository<PhieuTaiSanChiTiet, long> phieuTaiSanChiTietRepository,
                                           List<int> taiSanIdList)
        {
            foreach (var taiSanId in taiSanIdList)
            {
                // Lấy thông tin tài sản
                // Lấy 2 phiếu chi tiết tài sản mới nhất
                var taiSanChiTiet = (from ptsct in phieuTaiSanChiTietRepository.GetAll().Where(e => e.TaiSanId == taiSanId)
                                     from pts in phieuTaiSanRepository.GetAll().Where(e => e.Id == ptsct.PhieuTaiSanId)
                                     select new
                                     {
                                         ptsct.Id,
                                         pts.PhanLoaiId,
                                     }).OrderByDescending(e => e.Id).Take(2);

                var ts = taiSanRepository.GetAll().Where(w => w.Id == taiSanId).FirstOrDefault();
                if (taiSanChiTiet != null)
                {
                    // Xóa phiếu mới nhất
                    await phieuTaiSanChiTietRepository.DeleteAsync(e => e.Id == taiSanChiTiet.First().Id);

                    // Cập nhật trạng thái cũ cho tài sản
                    if (ts.GhiChu != null && ts.GhiChu == "1")
                    {
                        await CapNhatTrangThaiTaiSan(taiSanRepository, taiSanId, taiSanChiTiet.Count() == 1 ? (int)GlobalConst.TrangThaiTaiSanConst.KhoiTao : ((int)taiSanChiTiet.Last().PhanLoaiId == 5 || (int)taiSanChiTiet.Last().PhanLoaiId == 6 ? (int)GlobalConst.TrangThaiTaiSanConst.KhoiTao : (int)taiSanChiTiet.Last().PhanLoaiId));
                    }
                    else
                    {
                        await CapNhatTrangThaiTaiSan(taiSanRepository, taiSanId, taiSanChiTiet.Count() == 1 ? (int)GlobalConst.TrangThaiTaiSanConst.KhoiTao : (int)taiSanChiTiet.Last().PhanLoaiId);
                    }
                }
            }
            await Task.CompletedTask;
        }

        public async static Task CapNhatTrangThaiTaiSan(IRepository<TaiSan> repository, int taiSanId, int trangThai, int toChucId = 0)
        {
            var update = await repository.GetAsync(taiSanId);
            if ((update.TrangThaiId == 5 || update.TrangThaiId == 6) && trangThai == 1)
            {
                update.GhiChu = trangThai.ToString();
            }
            update.TrangThaiId = trangThai;

            if (toChucId > 0)
            {
                update.ToChucId = toChucId;
            }
        }

        public async static Task CapNhatTrangThaiTaiSanList(IRepository<TaiSan> repository, List<int> taiSanIdList, int trangThai, int toChucId = 0)
        {
            var taiSanList = await repository.GetAll().Where(e => taiSanIdList.Contains(e.Id)).ToListAsync();
            foreach (var taiSan in taiSanList)
            {
                taiSan.TrangThaiId = trangThai;
                // Nếu không truyền vào toChucId thì lấy toChucId từ bảng tài sản
                if (toChucId > 0)
                {
                    taiSan.ToChucId = toChucId;
                }
                else
                {
                    taiSan.ToChucId = taiSan.ToChucId;
                }
            }
        }

        public static string GetMaSuDungTaiSan(bool? tinhTrangSuDungQRCode, bool? tinhTrangSuDungBarCode, bool? tinhTrangSuDungRFIDCode)
        {
            List<string> result = new List<string>();

            if (tinhTrangSuDungQRCode == true)
            {
                result.Add("QRCode");
            }

            if (tinhTrangSuDungBarCode == true)
            {
                result.Add("Barcode");
            }

            if (tinhTrangSuDungRFIDCode == true)
            {
                result.Add("RFID");
            }

            return string.Join(",", result);
        }

        public static string GetDateStringFromDate(DateTime? date)
        {
            return date != null ? date.Value.ToString("dd/MM/yyyy") : string.Empty;
        }

        public static string GetDateTimeStringFromDate(DateTime? date)
        {
            return date != null ? date.Value.ToString("dd/MM/yyyy HH:mm:ss") : string.Empty;
        }

        public static DateTime? ConvertStringToDateTime(string input)
        {
            try
            {
                if (input.Length < 10)
                {
                    var list = input.Split('/');
                    input = list[0].PadLeft(2, '0') + "/" + list[1].PadLeft(2, '0') + "/" + list[2];
                }
                return DateTime.ParseExact(input, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            catch (Exception)
            {
                return null;
            }
        }

        public static async Task<List<TreeviewItemDto>> GetAllToChucTreeAsync(IRepository<ToChuc> toChucRepository)
        {
            var listParent = toChucRepository.GetAllList();
            var listTong = GetToChucChildren(listParent, null);
            return await Task.FromResult(listTong);
        }

        public static async Task<List<TreeviewItemDto>> GetAllToChucTheoNguoiDungTreeAsync(IRepository<ToChuc> toChucRepository, int toChucId, bool layCha)
        {
            var listParent = toChucRepository.GetAllList();
            var listChildren = GetToChucChildren(listParent, toChucId);
            var listTong = new List<TreeviewItemDto>();
            if (layCha)
            {
                listTong = listParent.Where(w => w.Id == toChucId).Select(w => new TreeviewItemDto
                {
                    Text = w.TenToChuc,
                    Value = w.Id,
                    Checked = false,
                    Children = listChildren,
                }).ToList();
            }
            else
            {
                listTong = listChildren;
            }
            return await Task.FromResult(listTong);
        }

        public static async Task<List<int>> GetAllToChucIdTheoNguoiDungListAsync(IRepository<ToChuc> toChucRepository, int toChucId, bool layCha = true)
        {
            var listTong = await GetAllToChucTheoNguoiDungTreeAsync(toChucRepository, toChucId, true);
            List<int> toChucIdList = new List<int>();
            if (layCha)
            {
                toChucIdList.Add(toChucId);
            }
            toChucIdList.AddRange(listTong.SelectManyRecursive(l => l.Children).Select(l => (int)l.Value).ToList());
            return await Task.FromResult(toChucIdList);
        }

        public static async Task GuiThongBaoAsync(IRepository<CanhBao> canhBaoRepository, IRepository<ToChuc> tochucRepository, List<User> listUser, IPermissionChecker PermissionChecker, int? taiKhoanId, int? phongBanNhanId, string noiDung, int loaiCanhBao)
        {
            var firstUser = listUser.FirstOrDefault().Id;
            var check = false; // Dùng để đánh dấu bản ghi đầu tiên cho chức năng được thông báo -> báo cáo cảnh báo
            foreach (var item in listUser)
            {
                var listPb = GlobalFunction.GetAllToChucIdTheoNguoiDungListAsync(tochucRepository, (int)item.ToChucId).Result;
                if (await PermissionChecker.IsGrantedAsync(item.ToUserIdentifier(), PermissionNames.Pages_QuanLyCanhBao) && listPb.Contains((int)phongBanNhanId))
                {
                    var create = new CanhBao();
                    create.TaiKhoanId = taiKhoanId;
                    create.PhongBanNhanId = phongBanNhanId;
                    create.NguoiNhanId = (int)item.Id;
                    create.NoiDung = noiDung;
                    create.PhanLoai = loaiCanhBao;
                    create.TrangThai = false;
                    if (check == false)
                    {
                        create.IsCheckBaoCao = true;
                        check = true;
                    }

                    await canhBaoRepository.InsertAsync(create);
                }
            }

        }

        public static int ConverHexaToDecimal(string value)
        {
            return Convert.ToInt32(value, 16);
        }

        public static string ConverDecimalToHexa(int value, int length)
        {
            string hexa = value.ToString("X");
            return hexa.PadLeft(length, '0');
        }

        private static List<TreeviewItemDto> GetToChucChildren(List<ToChuc> list, int? id)
        {
            return list.Where(w => w.TrucThuocToChucId == id).Select(w => new TreeviewItemDto
            {
                Text = w.TenToChuc,
                Value = w.Id,
                Checked = false,
                Children = GetToChucChildren(list, w.Id),
            }).ToList();
        }

        public static async Task<List<int>> GetAllLoaiTaiSanIdTheoChaListAsync(IRepository<LoaiTaiSan> repository, int taiSanChaId)
        {
            var listParent = await repository.GetAllListAsync();
            var listTong = GetLoaiTaiSanChildren(listParent, taiSanChaId);
            List<int> idList = new List<int>() { (int)taiSanChaId };
            idList.AddRange(listTong.SelectManyRecursive(l => l.Children).Select(l => (int)l.Value).ToList());
            return idList;
        }
        public static async Task<List<TreeviewItemDto>> GetAllLoaiTaiSanTreeAsync(IRepository<LoaiTaiSan> loaiTaiSan)
        {
            var listParent = await loaiTaiSan.GetAllListAsync();
            var listTong = GetLoaiTaiSanChildren(listParent, null);
            return listTong;
        }

        private static List<TreeviewItemDto> GetLoaiTaiSanChildren(List<LoaiTaiSan> list, int? id)
        {
            return list.Where(w => w.TaiSanChaId == id).Select(w => new TreeviewItemDto
            {
                Text = w.Ten,
                Value = w.Id,
                Checked = false,
                Children = GetLoaiTaiSanChildren(list, w.Id),
            }).ToList();
        }
    }
}
