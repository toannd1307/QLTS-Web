// This file is not generated, but this comment is necessary to exclude it from StyleCop analysis 
// <auto-generated/> 
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Abp.Application.Services;
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.Domain.Entities;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.IdentityFramework;
using Abp.Linq.Extensions;
using Abp.Localization;
using Abp.Runtime.Session;
using Abp.UI;
using MyProject.Authorization;
using MyProject.Authorization.Accounts;
using MyProject.Authorization.Roles;
using MyProject.Authorization.Users;
using MyProject.Roles.Dto;
using MyProject.Users.Dto;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Linq.Dynamic.Core;
using MyProject.Global;
using Abp.Authorization.Users;
using DbEntities;
using MyProject.Global.Dtos;

namespace MyProject.Users
{
    [AbpAuthorize(PermissionNames.Pages_Users)]
    public class UserAppService : AsyncCrudAppService<User, UserDto, long, PagedUserResultRequestDto, CreateUserDto, UserDto>, IUserAppService
    {
        private readonly UserManager _userManager;
        private readonly RoleManager _roleManager;
        private readonly IRepository<Role> _roleRepository;
        private readonly IPasswordHasher<User> _passwordHasher;
        private readonly IAbpSession _abpSession;
        private readonly LogInManager _logInManager;
        private readonly IRepository<User, long> _userRepository;
        private readonly IRepository<UserLoginAttempt, long> _userLoginAttempt;
        private readonly IRepository<ToChuc> _toChucRepository;

        public UserAppService(
            IRepository<ToChuc> toChucRepository,
            IRepository<User, long> repository,
            UserManager userManager,
            RoleManager roleManager,
            IRepository<Role> roleRepository,
            IPasswordHasher<User> passwordHasher,
            IAbpSession abpSession,
            IRepository<User, long> userRepository,
            IRepository<UserLoginAttempt, long> userLoginAttempt,
            LogInManager logInManager)
            : base(repository)
        {
            _toChucRepository = toChucRepository;
            _userLoginAttempt = userLoginAttempt;
            _userRepository = userRepository;
            _userManager = userManager;
            _roleManager = roleManager;
            _roleRepository = roleRepository;
            _passwordHasher = passwordHasher;
            _abpSession = abpSession;
            _logInManager = logInManager;
        }

        public async Task<List<LookupTableDto>> GetAllDonVi()
        {
            var list = await (from phongBanQL in this._toChucRepository.GetAll()
                              from phongBanCha in this._toChucRepository.GetAll().Where(w => w.Id == phongBanQL.TrucThuocToChucId).DefaultIfEmpty()
                              select new LookupTableDto
                              {
                                  Id = phongBanQL.Id,
                                  DisplayName = (phongBanQL.TrucThuocToChucId > 1 ? (phongBanCha.MaToChuc + " - ") : string.Empty) + phongBanQL.TenToChuc
                              }).ToListAsync();
            return list;
        }

        public async override Task<PagedResultDto<UserDto>> GetAllAsync(PagedUserResultRequestDto input)
        {
            #region Check null
            if (input == null)
            {
                throw new UserFriendlyException(StringResources.NullParameter);
            }
            #endregion

            if (input.ToChucIdList == null || input.ToChucIdList.Count == 0)
            {
                input.ToChucIdList = new List<int> { -1 };
            }
            var userList = await base.GetAllAsync(input);
            var loginTime = _userLoginAttempt.GetAll().Where(e => userList.Items.Select(e => e.Id).Contains((long)e.UserId) && (int)e.Result == 1)
                .OrderByDescending(e => e.CreationTime).ToList();
            foreach (var item in userList.Items)
            {
                item.LastLoginTime = loginTime.FirstOrDefault(e => e.UserId == item.Id)?.CreationTime;
            }
            return userList;
        }

        public override async Task<UserDto> CreateAsync(CreateUserDto input)
        {
            CheckCreatePermission();

            var user = ObjectMapper.Map<User>(input);

            user.TenantId = AbpSession.TenantId;
            user.IsEmailConfirmed = true;

            await _userManager.InitializeOptionsAsync(AbpSession.TenantId);

            CheckErrors(await _userManager.CreateAsync(user, input.Password));

            if (input.RoleNames != null)
            {
                CheckErrors(await _userManager.SetRolesAsync(user, input.RoleNames));
            }

            CurrentUnitOfWork.SaveChanges();

            return MapToEntityDto(user);
        }

        public override async Task<UserDto> UpdateAsync(UserDto input)
        {
            CheckUpdatePermission();

            var user = await _userManager.GetUserByIdAsync(input.Id);

            MapToEntity(input, user);

            CheckErrors(await _userManager.UpdateAsync(user));

            if (input.RoleNames != null)
            {
                CheckErrors(await _userManager.SetRolesAsync(user, input.RoleNames));
            }

            return await GetAsync(input);
        }

        public int CheckExist(string userName, string emailAddress, long? id)
        {
            userName = Global.GlobalFunction.RegexFormat(userName);
            emailAddress = Global.GlobalFunction.RegexFormat(emailAddress);

            var userList = this._userRepository.GetAll().Where(e => e.UserName == userName || e.EmailAddress == emailAddress)
                .WhereIf(id > 0, e => e.Id != id).FirstOrDefault();
            if (userList != null)
            {
                if (userList.UserName.ToLower() == userName.ToLower())
                {
                    return 1;
                }
                else if (userList.EmailAddress.ToLower() == emailAddress.ToLower())
                {
                    return 2;
                }
            }
            return 0;
        }

        public override async Task DeleteAsync(EntityDto<long> input)
        {
            var user = await _userManager.GetUserByIdAsync(input.Id);
            await _userManager.DeleteAsync(user);
        }

        public async Task<ListResultDto<RoleDto>> GetRoles()
        {
            var roles = await _roleRepository.GetAllListAsync();
            return new ListResultDto<RoleDto>(ObjectMapper.Map<List<RoleDto>>(roles));
        }

        public async Task ChangeLanguage(ChangeUserLanguageDto input)
        {
            await SettingManager.ChangeSettingForUserAsync(
                AbpSession.ToUserIdentifier(),
                LocalizationSettingNames.DefaultLanguage,
                input.LanguageName
            );
        }

        protected override User MapToEntity(CreateUserDto createInput)
        {
            var user = ObjectMapper.Map<User>(createInput);
            user.SetNormalizedNames();
            return user;
        }

        protected override void MapToEntity(UserDto input, User user)
        {
            ObjectMapper.Map(input, user);
            user.SetNormalizedNames();
        }

        protected override UserDto MapToEntityDto(User user)
        {
            var roleIds = user.Roles.Select(x => x.RoleId).ToArray();

            var roles = _roleManager.Roles.Where(r => roleIds.Contains(r.Id)).Select(r => r.NormalizedName);

            var userDto = base.MapToEntityDto(user);
            userDto.RoleNames = roles.ToArray();

            return userDto;
        }

        protected override IQueryable<User> CreateFilteredQuery(PagedUserResultRequestDto input)
        {
            input.Keyword = GlobalFunction.RegexFormat(input.Keyword);
            return Repository.GetAllIncluding(x => x.Roles)
                .WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x => x.UserName.Contains(input.Keyword) || x.Name.Contains(input.Keyword) || x.EmailAddress.Contains(input.Keyword) || x.PhoneNumber.Contains(input.Keyword))
                .WhereIf(input.ToChucIdList != null && input.ToChucIdList.Count > 0, x => input.ToChucIdList.Contains((int)x.ToChucId));
        }

        protected override async Task<User> GetEntityByIdAsync(long id)
        {
            var user = await Repository.GetAllIncluding(x => x.Roles).FirstOrDefaultAsync(x => x.Id == id);

            if (user == null)
            {
                throw new EntityNotFoundException(typeof(User), id);
            }

            return user;
        }

        protected override IQueryable<User> ApplySorting(IQueryable<User> query, PagedUserResultRequestDto input)
        {
            return query.OrderBy(input.Sorting ?? "name");
        }

        protected void CheckErrors(IdentityResult identityResult)
        {
            identityResult.CheckErrors(LocalizationManager);
        }

        public async Task<bool> ChangePassword(ChangePasswordDto input)
        {
            if (_abpSession.UserId == null)
            {
                throw new UserFriendlyException("Vui lòng đăng nhập trước khi thay đổi mật khẩu.");
            }
            long userId = _abpSession.UserId.Value;
            var user = await _userManager.GetUserByIdAsync(userId);
            var loginAsync = await _logInManager.LoginAsync(user.UserName, input.CurrentPassword, shouldLockout: false);
            if (loginAsync.Result != AbpLoginResultType.Success)
            {
                throw new UserFriendlyException("Mật khẩu hiện tại không chính xác.");
            }
            if (!new Regex(AccountAppService.PasswordRegex).IsMatch(input.NewPassword))
            {
                throw new UserFriendlyException("Mật khẩu phải có ít nhất 8 ký tự, chứa một chữ thường, chữ hoa và số.");
            }
            user.Password = _passwordHasher.HashPassword(user, input.NewPassword);
            CurrentUnitOfWork.SaveChanges();
            return true;
        }

        public async Task<bool> ResetPassword(ResetPasswordDto input)
        {
            if (_abpSession.UserId == null)
            {
                throw new UserFriendlyException("Vui lòng đăng nhập trước khi khôi phục mật khẩu.");
            }
            long currentUserId = _abpSession.UserId.Value;
            var currentUser = await _userManager.GetUserByIdAsync(currentUserId);
            var loginAsync = await _logInManager.LoginAsync(currentUser.UserName, input.AdminPassword, shouldLockout: false);
            if (loginAsync.Result != AbpLoginResultType.Success)
            {
                throw new UserFriendlyException("Mật khẩu quản trị viên không chính xác, mời bạn nhập lại.");
            }
            if (currentUser.IsDeleted || !currentUser.IsActive)
            {
                return false;
            }
            var roles = await _userManager.GetRolesAsync(currentUser);
            if (!roles.Contains(StaticRoleNames.Tenants.Admin))
            {
                throw new UserFriendlyException("Chỉ quản trị viên mới có thể đặt lại mật khẩu.");
            }

            var user = await _userManager.GetUserByIdAsync(input.UserId);
            if (user != null)
            {
                user.Password = _passwordHasher.HashPassword(user, input.NewPassword);
                CurrentUnitOfWork.SaveChanges();
            }

            return true;
        }


        public async Task<UserDto> GetForEdit(EntityDto<long> input, bool isView)
        {
            return await base.GetAsync(input);
        }
    }
}

