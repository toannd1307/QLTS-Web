// This file is not generated, but this comment is necessary to exclude it from StyleCop analysis 
// <auto-generated/> 
namespace CRM.Auditing
{
    using System.Collections.Generic;
    using System.Drawing;
    using System.IO;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading.Tasks;
    using Abp.Application.Services.Dto;
    using Abp.Auditing;
    using Abp.Authorization;
    using Abp.Domain.Repositories;
    using Abp.Extensions;
    using Abp.Linq.Extensions;
    using Abp.UI;
    using CRM.Auditing.Dto;
    using Microsoft.EntityFrameworkCore;
    using MyProject;
    using MyProject.Authorization;
    using MyProject.Authorization.Users;
    using MyProject.Data;
    using MyProject.Global;
    using MyProject.Global.Dtos;
    using MyProject.Net.MimeTypes;
    using OfficeOpenXml;
    using OfficeOpenXml.Style;

    [AbpAuthorize(PermissionNames.Pages_Users)]
    public class AuditLogAppService : MyProjectAppServiceBase, IAuditLogAppService
    {
        private readonly IRepository<AuditLog, long> auditLogRepository;
        private readonly IRepository<User, long> userRepository;
        private readonly INamespaceStripper namespaceStripper;
        private readonly IAppFolders appFolders;

        public AuditLogAppService(
            IRepository<AuditLog, long> auditLogRepository,
            IRepository<User, long> userRepository,
            IAppFolders appFolders,
            INamespaceStripper namespaceStripper)
        {
            this.auditLogRepository = auditLogRepository;
            this.userRepository = userRepository;
            this.appFolders = appFolders;
            this.namespaceStripper = namespaceStripper;
        }

        #region audit logs

        public async Task<PagedResultDto<AuditLogListDto>> GetAllAuditLogs(GetAuditLogsInput input)
        {
            #region Check null
            if (input == null)
            {
                throw new UserFriendlyException(StringResources.NullParameter);
            }
            #endregion

            input.StartDate = GlobalFunction.GetDateTime(input.StartDate);
            input.EndDate = GlobalFunction.GetDateTime(input.EndDate);

            var query = this.CreateAuditLogAndUsersQuery(input);

            var resultCount = await query.CountAsync();
            var results = await query
                .OrderBy(input.Sorting)
                .PageBy(input)
                .ToListAsync();

            var auditLogListDtos = this.ConvertToAuditLogListDtos(results);
            foreach (var item in auditLogListDtos)
            {
                item.ServiceNameForView = GetServiceName(item.ServiceName);
                item.MethodName = GetMethodName(item.MethodName);
            }
            return new PagedResultDto<AuditLogListDto>(resultCount, auditLogListDtos);
        }
        public async Task<FileDto> ExportToExcel(GetAuditLogsInput input)
        {
            // Lấy danh sách cần xuất excel
            var list = await this.GetAllAuditLogs(input);
            using var package = new ExcelPackage();

            // Add sheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Nhật ký người dùng");

            var namedStyle = package.Workbook.Styles.CreateNamedStyle("HyperLink");
            namedStyle.Style.Font.UnderLine = true;
            namedStyle.Style.Font.Color.SetColor(Color.Blue);

            // set header
            worksheet.Cells[1, 1].Value = "Thời gian";
            worksheet.Cells[1, 2].Value = "Tên người dùng";
            worksheet.Cells[1, 3].Value = "Dịch vụ";
            worksheet.Cells[1, 4].Value = "Hành động";
            worksheet.Cells[1, 5].Value = "Thời gian thực thi";
            worksheet.Cells[1, 6].Value = "Địa chỉ IP";
            worksheet.Cells[1, 7].Value = "Trình duyệt";

            // Bôi đậm header
            using (ExcelRange r = worksheet.Cells[1, 1, 1, 7])
            {
                using var f = new Font("Calibri", 12, FontStyle.Bold);
                r.Style.Font.SetFromFont(f);
                r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            }

            // Gan gia tri
            var rowNumber = 2;
            list.Items.ToList().ForEach(item =>
            {
                worksheet.Cells[rowNumber, 1].Value = GlobalFunction.GetDateTimeStringFromDate(item.ExecutionTime);
                worksheet.Cells[rowNumber, 2].Value = item.UserName;
                worksheet.Cells[rowNumber, 3].Value = item.ServiceNameForView;
                worksheet.Cells[rowNumber, 4].Value = item.MethodName;
                worksheet.Cells[rowNumber, 5].Value = item.ExecutionDuration;
                worksheet.Cells[rowNumber, 6].Value = item.ClientIpAddress;
                worksheet.Cells[rowNumber, 7].Value = item.BrowserInfo;
                rowNumber++;
            });

            // Cho các ô rộng theo dữ liệu
            worksheet.Cells.AutoFitColumns(0);

            worksheet.PrinterSettings.FitToHeight = 1;

            // Tên file
            var fileName = string.Join(".", new string[] { "Nhật ký người dùng", "xlsx" });

            // Lưu file vào server
            using (var stream = new MemoryStream())
            {
                package.SaveAs(stream);
            }

            var file = new FileDto(fileName, MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet);
            var filePath = Path.Combine(this.appFolders.TempFileDownloadFolder, file.FileToken);
            package.SaveAs(new FileInfo(filePath));
            return file;
        }

        public List<LookupTableDto<string>> GetAllServiceName()
        {
            var query = this.auditLogRepository.GetAll().Select(e => e.ServiceName).Distinct().ToList();
            var result = new List<LookupTableDto<string>>();
            foreach (var item in query)
            {
                if (result.Count(e => e.Id == item) == 0)
                {
                    result.Add(new LookupTableDto<string>
                    {
                        Id = (item),
                        DisplayName = this.GetServiceName(this.namespaceStripper.StripNameSpace(item)),
                    });
                }
            }
            return result;
        }

        private string GetServiceName(string serviceName)
        {
            serviceName = serviceName.Replace("AppService", "");
            switch (serviceName)
            {
                case "User":
                    serviceName = "Quản lý người dùng";
                    break;
                case "UserLink":
                    serviceName = "Liên kết người dùng";
                    break;
                case "AbpUserConfigurationController":
                    serviceName = "Cấu hình người dùng";
                    break;
                case "TenantSettings":
                    serviceName = "Cài đặt tenant";
                    break;
                case "TokenAuthController":
                    serviceName = "Lấy Token";
                    break;
            }
            return serviceName;
        }

        private string GetMethodName(string methodName)
        {
            if (methodName.Contains("Get") && !methodName.Contains("Excel"))
            {
                methodName = "Xem thông tin";
            }
            else if (methodName.Contains("Excel"))
            {
                methodName = "Xuất excel";
            }
            else if (methodName.Contains("Create") || methodName.Contains("Edit"))
            {
                methodName = "Thêm mới hoặc sửa";
            }
            else if (methodName.Contains("Delete"))
            {
                methodName = "Xóa thông tin";
            }
            else if (methodName.Contains("ChuanHoa"))
            {
                methodName = "Xác thực";
            }
            else
            {
                methodName = "Xem thông tin";
            }

            return methodName;
        }

        private List<AuditLogListDto> ConvertToAuditLogListDtos(List<AuditLogAndUser> results)
        {
            return results.Select(
                result =>
                {
                    var auditLogListDto = this.ObjectMapper.Map<AuditLogListDto>(result.AuditLog);
                    auditLogListDto.UserName = result.User?.UserName;
                    auditLogListDto.ServiceName = this.namespaceStripper.StripNameSpace(auditLogListDto.ServiceName);
                    return auditLogListDto;
                }).ToList();
        }

        private IQueryable<AuditLogAndUser> CreateAuditLogAndUsersQuery(GetAuditLogsInput input)
        {
            #region Check null
            if (input == null)
            {
                throw new UserFriendlyException(StringResources.NullParameter);
            }
            #endregion
            var query = from auditLog in this.auditLogRepository.GetAll()
                        join user in this.userRepository.GetAll() on auditLog.UserId equals user.Id into userJoin
                        from joinedUser in userJoin.DefaultIfEmpty()
                        select new AuditLogAndUser { AuditLog = auditLog, User = joinedUser };

            query = query
                .WhereIf(!input.UserName.IsNullOrWhiteSpace(), item => item.User.UserName.Contains(GlobalFunction.RegexFormat(input.UserName)))
                .WhereIf(!input.ServiceName.IsNullOrWhiteSpace(), item => item.AuditLog.ServiceName.Contains(input.ServiceName))
                .WhereIf(input.StartDate != null && input.EndDate != null, item => item.AuditLog.ExecutionTime >= input.StartDate && item.AuditLog.ExecutionTime <= input.EndDate);
            return query;
        }

        #endregion
    }
}